{"version":3,"sources":["../../src/googleai/index.ts"],"sourcesContent":["/**\n * Copyright 2025 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActionMetadata, EmbedderReference, ModelReference, z } from 'genkit';\nimport { logger } from 'genkit/logging';\nimport {\n  GenkitPluginV2,\n  ResolvableAction,\n  genkitPluginV2,\n} from 'genkit/plugin';\nimport { ActionType } from 'genkit/registry';\nimport { extractErrMsg } from '../common/utils.js';\nimport { listModels } from './client.js';\nimport { GoogleAIPluginOptions } from './types.js';\nimport { calculateApiKey } from './utils.js';\n\n// These are namespaced because they all intentionally have\n// functions of the same name with the same arguments.\n// (All exports from these files are used here)\nimport * as embedder from './embedder.js';\nimport * as gemini from './gemini.js';\nimport * as imagen from './imagen.js';\nimport * as veo from './veo.js';\n\nexport { type EmbeddingConfig } from './embedder.js';\nexport { type GeminiConfig, type GeminiTtsConfig } from './gemini.js';\nexport { type ImagenConfig } from './imagen.js';\nexport { type GoogleAIPluginOptions };\n\nasync function initializer(options?: GoogleAIPluginOptions) {\n  return [\n    ...imagen.listKnownModels(options),\n    ...gemini.listKnownModels(options),\n    ...embedder.listKnownModels(options),\n    ...veo.listKnownModels(options),\n  ];\n}\n\nasync function resolver(\n  actionType: ActionType,\n  actionName: string,\n  options: GoogleAIPluginOptions\n): Promise<ResolvableAction | undefined> {\n  switch (actionType) {\n    case 'model':\n      if (veo.isVeoModelName(actionName)) {\n        return undefined;\n      } else if (imagen.isImagenModelName(actionName)) {\n        return await imagen.defineModel(actionName, options);\n      } else {\n        // gemini, tts, gemma, unknown models\n        return await gemini.defineModel(actionName, options);\n      }\n      break;\n    case 'background-model':\n      if (veo.isVeoModelName(actionName)) {\n        return await veo.defineModel(actionName, options);\n      }\n      break;\n    case 'embedder':\n      return await embedder.defineEmbedder(actionName, options);\n      break;\n  }\n  return undefined;\n}\n\nasync function listActions(\n  options?: GoogleAIPluginOptions\n): Promise<ActionMetadata[]> {\n  try {\n    const apiKey = calculateApiKey(options?.apiKey, undefined);\n    const allModels = await listModels(apiKey, {\n      baseUrl: options?.baseUrl,\n      apiVersion: options?.apiVersion,\n    });\n\n    return [\n      ...gemini.listActions(allModels),\n      ...imagen.listActions(allModels),\n      ...veo.listActions(allModels),\n      ...embedder.listActions(allModels),\n    ];\n  } catch (e: unknown) {\n    logger.error(extractErrMsg(e));\n    return [];\n  }\n}\n\n/**\n * Google Gemini Developer API plugin.\n */\nexport function googleAIPlugin(\n  options?: GoogleAIPluginOptions\n): GenkitPluginV2 {\n  let listActionsCache;\n  return genkitPluginV2({\n    name: 'googleai',\n    init: async () => await initializer(options),\n    resolve: async (actionType: ActionType, actionName: string) =>\n      await resolver(actionType, actionName, options || {}),\n    list: async () => {\n      if (listActionsCache) return listActionsCache;\n      listActionsCache = await listActions(options);\n      return listActionsCache;\n    },\n  });\n}\n\nexport type GoogleAIPlugin = {\n  (pluginOptions?: GoogleAIPluginOptions): GenkitPluginV2;\n  model(\n    name: gemini.KnownGemmaModels | (gemini.GemmaModelName & {}),\n    config: gemini.GemmaConfig\n  ): ModelReference<gemini.GemmaConfigSchemaType>;\n  model(\n    name: gemini.KnownTtsModels | (gemini.TTSModelName & {}),\n    config: gemini.GeminiTtsConfig\n  ): ModelReference<gemini.GeminiTtsConfigSchemaType>;\n  model(\n    name: gemini.KnownGeminiModels | (gemini.GeminiModelName & {}),\n    config?: gemini.GeminiConfig\n  ): ModelReference<gemini.GeminiConfigSchemaType>;\n  model(\n    name: imagen.KnownModels | (imagen.ImagenModelName & {}),\n    config?: imagen.ImagenConfig\n  ): ModelReference<imagen.ImagenConfigSchemaType>;\n  model(\n    name: veo.KnownModels | (veo.VeoModelName & {}),\n    config?: veo.VeoConfig\n  ): ModelReference<veo.VeoConfigSchemaType>;\n  model(name: string, config?: any): ModelReference<z.ZodTypeAny>;\n\n  embedder(\n    name: string,\n    config?: embedder.EmbeddingConfig\n  ): EmbedderReference<embedder.EmbeddingConfigSchemaType>;\n};\n\n/**\n * Google Gemini Developer API plugin.\n */\nexport const googleAI = googleAIPlugin as GoogleAIPlugin;\n(googleAI as any).model = (\n  name: string,\n  config?: any\n): ModelReference<z.ZodTypeAny> => {\n  if (veo.isVeoModelName(name)) {\n    return veo.model(name, config);\n  }\n  if (imagen.isImagenModelName(name)) {\n    return imagen.model(name, config);\n  }\n  // gemma, tts, gemini and unknown model families.\n  return gemini.model(name, config);\n};\ngoogleAI.embedder = (\n  name: string,\n  config?: embedder.EmbeddingConfig\n): EmbedderReference<embedder.EmbeddingConfigSchemaType> => {\n  return embedder.model(name, config);\n};\n\nexport default googleAI;\n"],"mappings":"AAiBA,SAAS,cAAc;AACvB;AAAA,EAGE;AAAA,OACK;AAEP,SAAS,qBAAqB;AAC9B,SAAS,kBAAkB;AAE3B,SAAS,uBAAuB;AAKhC,YAAY,cAAc;AAC1B,YAAY,YAAY;AACxB,YAAY,YAAY;AACxB,YAAY,SAAS;AAOrB,eAAe,YAAY,SAAiC;AAC1D,SAAO;AAAA,IACL,GAAG,OAAO,gBAAgB,OAAO;AAAA,IACjC,GAAG,OAAO,gBAAgB,OAAO;AAAA,IACjC,GAAG,SAAS,gBAAgB,OAAO;AAAA,IACnC,GAAG,IAAI,gBAAgB,OAAO;AAAA,EAChC;AACF;AAEA,eAAe,SACb,YACA,YACA,SACuC;AACvC,UAAQ,YAAY;AAAA,IAClB,KAAK;AACH,UAAI,IAAI,eAAe,UAAU,GAAG;AAClC,eAAO;AAAA,MACT,WAAW,OAAO,kBAAkB,UAAU,GAAG;AAC/C,eAAO,MAAM,OAAO,YAAY,YAAY,OAAO;AAAA,MACrD,OAAO;AAEL,eAAO,MAAM,OAAO,YAAY,YAAY,OAAO;AAAA,MACrD;AACA;AAAA,IACF,KAAK;AACH,UAAI,IAAI,eAAe,UAAU,GAAG;AAClC,eAAO,MAAM,IAAI,YAAY,YAAY,OAAO;AAAA,MAClD;AACA;AAAA,IACF,KAAK;AACH,aAAO,MAAM,SAAS,eAAe,YAAY,OAAO;AACxD;AAAA,EACJ;AACA,SAAO;AACT;AAEA,eAAe,YACb,SAC2B;AAC3B,MAAI;AACF,UAAM,SAAS,gBAAgB,SAAS,QAAQ,MAAS;AACzD,UAAM,YAAY,MAAM,WAAW,QAAQ;AAAA,MACzC,SAAS,SAAS;AAAA,MAClB,YAAY,SAAS;AAAA,IACvB,CAAC;AAED,WAAO;AAAA,MACL,GAAG,OAAO,YAAY,SAAS;AAAA,MAC/B,GAAG,OAAO,YAAY,SAAS;AAAA,MAC/B,GAAG,IAAI,YAAY,SAAS;AAAA,MAC5B,GAAG,SAAS,YAAY,SAAS;AAAA,IACnC;AAAA,EACF,SAAS,GAAY;AACnB,WAAO,MAAM,cAAc,CAAC,CAAC;AAC7B,WAAO,CAAC;AAAA,EACV;AACF;AAKO,SAAS,eACd,SACgB;AAChB,MAAI;AACJ,SAAO,eAAe;AAAA,IACpB,MAAM;AAAA,IACN,MAAM,YAAY,MAAM,YAAY,OAAO;AAAA,IAC3C,SAAS,OAAO,YAAwB,eACtC,MAAM,SAAS,YAAY,YAAY,WAAW,CAAC,CAAC;AAAA,IACtD,MAAM,YAAY;AAChB,UAAI,iBAAkB,QAAO;AAC7B,yBAAmB,MAAM,YAAY,OAAO;AAC5C,aAAO;AAAA,IACT;AAAA,EACF,CAAC;AACH;AAmCO,MAAM,WAAW;AACvB,SAAiB,QAAQ,CACxB,MACA,WACiC;AACjC,MAAI,IAAI,eAAe,IAAI,GAAG;AAC5B,WAAO,IAAI,MAAM,MAAM,MAAM;AAAA,EAC/B;AACA,MAAI,OAAO,kBAAkB,IAAI,GAAG;AAClC,WAAO,OAAO,MAAM,MAAM,MAAM;AAAA,EAClC;AAEA,SAAO,OAAO,MAAM,MAAM,MAAM;AAClC;AACA,SAAS,WAAW,CAClB,MACA,WAC0D;AAC1D,SAAO,SAAS,MAAM,MAAM,MAAM;AACpC;AAEA,IAAO,mBAAQ;","names":[]}