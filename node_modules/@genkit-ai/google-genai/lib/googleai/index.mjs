import { logger } from "genkit/logging";
import {
  genkitPluginV2
} from "genkit/plugin";
import { extractErrMsg } from "../common/utils.js";
import { listModels } from "./client.js";
import { calculateApiKey } from "./utils.js";
import * as embedder from "./embedder.js";
import * as gemini from "./gemini.js";
import * as imagen from "./imagen.js";
import * as veo from "./veo.js";
async function initializer(options) {
  return [
    ...imagen.listKnownModels(options),
    ...gemini.listKnownModels(options),
    ...embedder.listKnownModels(options),
    ...veo.listKnownModels(options)
  ];
}
async function resolver(actionType, actionName, options) {
  switch (actionType) {
    case "model":
      if (veo.isVeoModelName(actionName)) {
        return void 0;
      } else if (imagen.isImagenModelName(actionName)) {
        return await imagen.defineModel(actionName, options);
      } else {
        return await gemini.defineModel(actionName, options);
      }
      break;
    case "background-model":
      if (veo.isVeoModelName(actionName)) {
        return await veo.defineModel(actionName, options);
      }
      break;
    case "embedder":
      return await embedder.defineEmbedder(actionName, options);
      break;
  }
  return void 0;
}
async function listActions(options) {
  try {
    const apiKey = calculateApiKey(options?.apiKey, void 0);
    const allModels = await listModels(apiKey, {
      baseUrl: options?.baseUrl,
      apiVersion: options?.apiVersion
    });
    return [
      ...gemini.listActions(allModels),
      ...imagen.listActions(allModels),
      ...veo.listActions(allModels),
      ...embedder.listActions(allModels)
    ];
  } catch (e) {
    logger.error(extractErrMsg(e));
    return [];
  }
}
function googleAIPlugin(options) {
  let listActionsCache;
  return genkitPluginV2({
    name: "googleai",
    init: async () => await initializer(options),
    resolve: async (actionType, actionName) => await resolver(actionType, actionName, options || {}),
    list: async () => {
      if (listActionsCache) return listActionsCache;
      listActionsCache = await listActions(options);
      return listActionsCache;
    }
  });
}
const googleAI = googleAIPlugin;
googleAI.model = (name, config) => {
  if (veo.isVeoModelName(name)) {
    return veo.model(name, config);
  }
  if (imagen.isImagenModelName(name)) {
    return imagen.model(name, config);
  }
  return gemini.model(name, config);
};
googleAI.embedder = (name, config) => {
  return embedder.model(name, config);
};
var googleai_default = googleAI;
export {
  googleai_default as default,
  googleAI,
  googleAIPlugin
};
//# sourceMappingURL=index.mjs.map