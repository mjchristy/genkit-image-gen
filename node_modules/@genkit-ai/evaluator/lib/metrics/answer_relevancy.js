"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var answer_relevancy_exports = {};
__export(answer_relevancy_exports, {
  answerRelevancyScore: () => answerRelevancyScore
});
module.exports = __toCommonJS(answer_relevancy_exports);
var import_compute_cosine_similarity = __toESM(require("compute-cosine-similarity"));
var import_genkit = require("genkit");
var import_evaluator = require("genkit/evaluator");
var import_path = __toESM(require("path"));
var import_helper = require("./helper.js");
const AnswerRelevancyResponseSchema = import_genkit.z.object({
  question: import_genkit.z.string(),
  answered: import_genkit.z.boolean(),
  noncommittal: import_genkit.z.boolean()
});
async function answerRelevancyScore(ai, judgeLlm, dataPoint, embedder, judgeConfig, embedderOptions) {
  try {
    if (!dataPoint.input) {
      throw new Error("Input was not provided");
    }
    if (!dataPoint.output) {
      throw new Error("Output was not provided");
    }
    if (!dataPoint.context?.length) {
      throw new Error("Context was not provided");
    }
    const input = typeof dataPoint.input === "string" ? dataPoint.input : JSON.stringify(dataPoint.input);
    const output = typeof dataPoint.output === "string" ? dataPoint.output : JSON.stringify(dataPoint.output);
    const context = dataPoint.context.map((i) => JSON.stringify(i));
    const prompt = await (0, import_helper.loadPromptFile)(
      import_path.default.resolve((0, import_helper.getDirName)(), "../../prompts/answer_relevancy.prompt")
    );
    const response = await ai.generate({
      model: judgeLlm,
      config: judgeConfig,
      prompt: await (0, import_helper.renderText)(prompt, {
        question: input,
        answer: output,
        context: context.join(" ")
      }),
      output: {
        schema: AnswerRelevancyResponseSchema
      }
    });
    const genQuestion = response.output?.question;
    if (!genQuestion)
      throw new Error("Error generating question for answer relevancy");
    const questionEmbed = (await ai.embed({
      embedder,
      content: input,
      options: embedderOptions
    }))[0].embedding;
    const genQuestionEmbed = (await ai.embed({
      embedder,
      content: genQuestion,
      options: embedderOptions
    }))[0].embedding;
    const score = cosineSimilarity(questionEmbed, genQuestionEmbed);
    const answered = response.output?.answered ?? false;
    const isNonCommittal = response.output?.noncommittal ?? false;
    const answeredPenalty = !answered ? 0.5 : 0;
    const adjustedScore = score - answeredPenalty < 0 ? 0 : score - answeredPenalty;
    const reasoning = isNonCommittal ? "Noncommittal" : answered ? "Cosine similarity" : "Cosine similarity with penalty for insufficient answer";
    const finalScore = adjustedScore * (isNonCommittal ? 0 : 1);
    return {
      score: finalScore,
      details: {
        reasoning
      },
      status: finalScore > 0.5 ? import_evaluator.EvalStatusEnum.PASS : import_evaluator.EvalStatusEnum.FAIL
    };
  } catch (err) {
    console.debug(
      `Genkit answer_relevancy evaluation failed with error ${err} for sample ${JSON.stringify(
        dataPoint
      )}`
    );
    throw err;
  }
}
function cosineSimilarity(v1, v2) {
  const maybeScore = (0, import_compute_cosine_similarity.default)(v1, v2);
  if (!maybeScore) {
    throw new Error("Unable to compute cosine similarity");
  }
  return Math.abs(maybeScore);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  answerRelevancyScore
});
//# sourceMappingURL=answer_relevancy.js.map