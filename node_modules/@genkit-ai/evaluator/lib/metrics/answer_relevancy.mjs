import similarity from "compute-cosine-similarity";
import { z } from "genkit";
import {
  EvalStatusEnum
} from "genkit/evaluator";
import path from "path";
import { getDirName, loadPromptFile, renderText } from "./helper.js";
const AnswerRelevancyResponseSchema = z.object({
  question: z.string(),
  answered: z.boolean(),
  noncommittal: z.boolean()
});
async function answerRelevancyScore(ai, judgeLlm, dataPoint, embedder, judgeConfig, embedderOptions) {
  try {
    if (!dataPoint.input) {
      throw new Error("Input was not provided");
    }
    if (!dataPoint.output) {
      throw new Error("Output was not provided");
    }
    if (!dataPoint.context?.length) {
      throw new Error("Context was not provided");
    }
    const input = typeof dataPoint.input === "string" ? dataPoint.input : JSON.stringify(dataPoint.input);
    const output = typeof dataPoint.output === "string" ? dataPoint.output : JSON.stringify(dataPoint.output);
    const context = dataPoint.context.map((i) => JSON.stringify(i));
    const prompt = await loadPromptFile(
      path.resolve(getDirName(), "../../prompts/answer_relevancy.prompt")
    );
    const response = await ai.generate({
      model: judgeLlm,
      config: judgeConfig,
      prompt: await renderText(prompt, {
        question: input,
        answer: output,
        context: context.join(" ")
      }),
      output: {
        schema: AnswerRelevancyResponseSchema
      }
    });
    const genQuestion = response.output?.question;
    if (!genQuestion)
      throw new Error("Error generating question for answer relevancy");
    const questionEmbed = (await ai.embed({
      embedder,
      content: input,
      options: embedderOptions
    }))[0].embedding;
    const genQuestionEmbed = (await ai.embed({
      embedder,
      content: genQuestion,
      options: embedderOptions
    }))[0].embedding;
    const score = cosineSimilarity(questionEmbed, genQuestionEmbed);
    const answered = response.output?.answered ?? false;
    const isNonCommittal = response.output?.noncommittal ?? false;
    const answeredPenalty = !answered ? 0.5 : 0;
    const adjustedScore = score - answeredPenalty < 0 ? 0 : score - answeredPenalty;
    const reasoning = isNonCommittal ? "Noncommittal" : answered ? "Cosine similarity" : "Cosine similarity with penalty for insufficient answer";
    const finalScore = adjustedScore * (isNonCommittal ? 0 : 1);
    return {
      score: finalScore,
      details: {
        reasoning
      },
      status: finalScore > 0.5 ? EvalStatusEnum.PASS : EvalStatusEnum.FAIL
    };
  } catch (err) {
    console.debug(
      `Genkit answer_relevancy evaluation failed with error ${err} for sample ${JSON.stringify(
        dataPoint
      )}`
    );
    throw err;
  }
}
function cosineSimilarity(v1, v2) {
  const maybeScore = similarity(v1, v2);
  if (!maybeScore) {
    throw new Error("Unable to compute cosine similarity");
  }
  return Math.abs(maybeScore);
}
export {
  answerRelevancyScore
};
//# sourceMappingURL=answer_relevancy.mjs.map