"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var answer_accuracy_exports = {};
__export(answer_accuracy_exports, {
  answerAccuracyScore: () => answerAccuracyScore
});
module.exports = __toCommonJS(answer_accuracy_exports);
var import_evaluator = require("genkit/evaluator");
var import_path = __toESM(require("path"));
var import_helper = require("./helper.js");
async function answerAccuracyScore(ai, judgeLlm, dataPoint, judgeConfig) {
  if (!dataPoint.output) {
    throw new Error("Output was not provided");
  }
  if (!dataPoint.reference) {
    throw new Error("Reference was not provided");
  }
  const input = typeof dataPoint.input === "string" ? dataPoint.input : JSON.stringify(dataPoint.input);
  const output = typeof dataPoint.output === "string" ? dataPoint.output : JSON.stringify(dataPoint.output);
  const reference = typeof dataPoint.reference === "string" ? dataPoint.reference : JSON.stringify(dataPoint.reference);
  const prompt = await (0, import_helper.loadPromptFile)(
    import_path.default.resolve((0, import_helper.getDirName)(), "../../prompts/answer_accuracy.prompt")
  );
  const origResp = await ai.generate({
    model: judgeLlm,
    config: judgeConfig,
    prompt: await (0, import_helper.renderText)(prompt, {
      query: input,
      output,
      reference
    })
  });
  const origScore = Number.parseInt(origResp.text);
  if (Number.isNaN(origScore)) {
    throw new Error("Error generating original response for answer accuracy");
  }
  const invResp = await ai.generate({
    model: judgeLlm,
    config: judgeConfig,
    prompt: await (0, import_helper.renderText)(prompt, {
      query: input,
      output: reference,
      reference: output
    })
  });
  const invScore = Number.parseInt(invResp.text);
  if (Number.isNaN(invScore)) {
    throw new Error("Error generating inverted response for answer accuracy");
  }
  const score = (origScore + invScore) / 8;
  return {
    score,
    status: score >= 0.5 ? import_evaluator.EvalStatusEnum.PASS : import_evaluator.EvalStatusEnum.FAIL
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  answerAccuracyScore
});
//# sourceMappingURL=answer_accuracy.js.map