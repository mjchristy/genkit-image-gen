"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var regexp_exports = {};
__export(regexp_exports, {
  regexp: () => regexp
});
module.exports = __toCommonJS(regexp_exports);
var import_evaluator = require("genkit/evaluator");
async function regexp(dataPoint) {
  if (!dataPoint.output) {
    throw new Error("Output was not provided");
  }
  if (!dataPoint.reference) {
    throw new Error("Reference was not provided");
  }
  if (typeof dataPoint.reference !== "string") {
    throw new Error("Reference must be a string (regex)");
  }
  const re = new RegExp(dataPoint.reference);
  const outputStr = typeof dataPoint.output !== "string" ? JSON.stringify(dataPoint.output) : dataPoint.output;
  const score = re.test(outputStr);
  return {
    score,
    status: score ? import_evaluator.EvalStatusEnum.PASS : import_evaluator.EvalStatusEnum.FAIL
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  regexp
});
//# sourceMappingURL=regexp.js.map