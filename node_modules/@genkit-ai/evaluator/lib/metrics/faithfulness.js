"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var faithfulness_exports = {};
__export(faithfulness_exports, {
  faithfulnessScore: () => faithfulnessScore
});
module.exports = __toCommonJS(faithfulness_exports);
var import_genkit = require("genkit");
var import_evaluator = require("genkit/evaluator");
var import_path = __toESM(require("path"));
var import_helper = require("./helper.js");
const LongFormResponseSchema = import_genkit.z.object({ statements: import_genkit.z.array(import_genkit.z.string()) });
const NliResponseBaseSchema = import_genkit.z.object({
  statement: import_genkit.z.string(),
  reason: import_genkit.z.string(),
  verdict: import_genkit.z.boolean()
});
const NliResponseSchema = import_genkit.z.object({
  responses: import_genkit.z.array(NliResponseBaseSchema)
});
async function faithfulnessScore(ai, judgeLlm, dataPoint, judgeConfig) {
  try {
    if (!dataPoint.input) {
      throw new Error("Input was not provided");
    }
    if (!dataPoint.output) {
      throw new Error("Output was not provided");
    }
    if (!dataPoint.context?.length) {
      throw new Error("Context was not provided");
    }
    const input = typeof dataPoint.input === "string" ? dataPoint.input : JSON.stringify(dataPoint.input);
    const output = typeof dataPoint.output === "string" ? dataPoint.output : JSON.stringify(dataPoint.output);
    const context = dataPoint.context.map((i) => JSON.stringify(i));
    const longFormPrompt = await (0, import_helper.loadPromptFile)(
      import_path.default.resolve((0, import_helper.getDirName)(), "../../prompts/faithfulness_long_form.prompt")
    );
    const longFormResponse = await ai.generate({
      model: judgeLlm,
      config: judgeConfig,
      prompt: await (0, import_helper.renderText)(longFormPrompt, {
        question: input,
        answer: output
      }),
      output: {
        schema: LongFormResponseSchema
      }
    });
    const parsedLongFormResponse = longFormResponse.output;
    const statements = parsedLongFormResponse?.statements ?? [];
    if (statements.length === 0) {
      throw new Error("No statements returned");
    }
    const allStatements = statements.map((s) => `statement: ${s}`).join("\n");
    const allContext = context.join("\n");
    const nliPrompt = await (0, import_helper.loadPromptFile)(
      import_path.default.resolve((0, import_helper.getDirName)(), "../../prompts/faithfulness_nli.prompt")
    );
    const response = await ai.generate({
      model: judgeLlm,
      prompt: await (0, import_helper.renderText)(nliPrompt, {
        context: allContext,
        statements: allStatements
      }),
      output: {
        schema: NliResponseSchema
      }
    });
    const parsedResponse = response.output;
    return nliResponseToScore(parsedResponse?.responses ?? []);
  } catch (err) {
    console.debug(
      `Genkit faithfulness evaluation failed with error ${err} for sample ${JSON.stringify(
        dataPoint
      )}`
    );
    throw err;
  }
}
function nliResponseToScore(input) {
  if (!input) {
    throw new Error(`Evaluator response empty`);
  }
  const faithfulStatements = input.reduce((total, resp) => {
    return total + (resp.verdict ? 1 : 0);
  }, 0);
  const score = faithfulStatements / input.length;
  return {
    score,
    details: { reasoning: input.map((r) => r.reason).join("; ") },
    status: score > 0.5 ? import_evaluator.EvalStatusEnum.PASS : import_evaluator.EvalStatusEnum.FAIL
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  faithfulnessScore
});
//# sourceMappingURL=faithfulness.js.map