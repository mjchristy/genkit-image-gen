import * as _genkit_ai_ai_evaluator from '@genkit-ai/ai/evaluator';
import { z, Genkit } from 'genkit';
import { GenkitPlugin } from 'genkit/plugin';
import { PluginOptions, GenkitMetric } from './types.js';
export { GenkitMetricConfig } from './types.js';
import 'genkit/evaluator';

/**
 * Reference to the Genkit evaluator for a specified metric
 */
declare const genkitEvalRef: (metric: GenkitMetric) => _genkit_ai_ai_evaluator.EvaluatorReference<z.ZodUndefined>;
/**
 * Genkit evaluation plugin that provides the RAG evaluators
 */
declare function genkitEval<ModelCustomOptions extends z.ZodTypeAny, EmbedderCustomOptions extends z.ZodTypeAny>(params: PluginOptions<ModelCustomOptions, EmbedderCustomOptions>): GenkitPlugin;

/**
 * Configures a Genkit evaluator
 */
declare function genkitEvaluators<ModelCustomOptions extends z.ZodTypeAny, EmbedderCustomOptions extends z.ZodTypeAny>(ai: Genkit, params: PluginOptions<ModelCustomOptions, EmbedderCustomOptions>): _genkit_ai_ai_evaluator.EvaluatorAction<z.ZodObject<{
    input: z.ZodUnknown;
    output: z.ZodOptional<z.ZodUnknown>;
    context: z.ZodOptional<z.ZodArray<z.ZodUnknown, "many">>;
    reference: z.ZodOptional<z.ZodUnknown>;
    testCaseId: z.ZodOptional<z.ZodString>;
    traceIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    output?: unknown;
    context?: unknown[] | undefined;
    input?: unknown;
    reference?: unknown;
    testCaseId?: string | undefined;
    traceIds?: string[] | undefined;
}, {
    output?: unknown;
    context?: unknown[] | undefined;
    input?: unknown;
    reference?: unknown;
    testCaseId?: string | undefined;
    traceIds?: string[] | undefined;
}>, z.ZodTypeAny>[];

export { GenkitMetric, PluginOptions, genkitEval as default, genkitEval, genkitEvalRef, genkitEvaluators };
